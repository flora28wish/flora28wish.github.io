<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP 方法多載 1</title>
      <link href="/2020/04/18/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%201/"/>
      <url>/2020/04/18/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%201/</url>
      
        <content type="html"><![CDATA[<p>我是又小又菜的 PHP 工程師，目前的工作主要都是使用 Laravel 框架進行開發，其中經常使用到 <a href="https://github.com/andersao/l5-repository" target="_blank" rel="noopener">andersao/l5-repository</a> 套件，一直以來都是乖乖的按照文件上面提供的方法使用，忽然心血來潮的看了看源代碼。誒！怎麼錯過了這麼好用的方法呢～趕快來筆記一下💕</p><h1 id="多載-Overloading"><a href="#多載-Overloading" class="headerlink" title="多載 Overloading"></a>多載 Overloading</h1><p>PHP 多載意指動態創建屬性或方法。透過魔術方法來實現。 <a href="https://www.php.net/manual/en/language.oop5.overloading.php" target="_blank" rel="noopener">參考</a></p><small style="color: lightslategray">Overloading in PHP provides means to dynamically "create" properties and methods.These dynamic entities are processed via magic methods.</small><p>與 Java 多載的概念不同，這點需要特別注意！</p><small style="color: lightslategray">PHP's overloading features are different from Java's.</small><h2 id="方法多載-Method-Overloading"><a href="#方法多載-Method-Overloading" class="headerlink" title="方法多載 Method Overloading"></a>方法多載 Method Overloading</h2><p>方法多載有 <code>__call()</code> 和 <code>__callStatic()</code> 這兩種魔法方法。 <a href="https://www.php.net/manual/en/language.oop5.overloading.php#object.call" target="_blank" rel="noopener">參考</a></p><small style="color: lightslategray">Overloading methods via the __call() and __callStatic() magic methods.</small><h3 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public __call(string $name, array $arguments): mixed</span><br></pre></td></tr></table></figure><p><code>$name</code> → 要呼叫的方法名稱</p><small style="color: lightslategray">The $name argument is the name of the method being called.<br></small><p><code>$arguments</code> → 傳給 <code>$name</code> 方法的枚舉陣列</p><small style="color: lightslategray">The $arguments argument is an enumerated array containing the parameters passed to the $name's method.</small><h4 id="若呼叫物件某個方法，但這個方法未被定義時，就會觸發-call-。"><a href="#若呼叫物件某個方法，但這個方法未被定義時，就會觸發-call-。" class="headerlink" title="若呼叫物件某個方法，但這個方法未被定義時，就會觸發 __call()。"></a>若呼叫物件某個方法，但這個方法未被定義時，就會觸發 <code>__call()</code>。</h4><small style="color: lightslategray">__call is triggered when invoking inaccessible methods in an object context.</small><p>接著來看看下方的範例加強理解：</p><small style="color: lightslategray">Example:</small><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public function __call($methodName, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        return $methodName . &#39; method not exist&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function test1($word)</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;test1 method result is &#39; . $word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$word &#x3D; &#39;Word&#39;;</span><br><span class="line">$test &#x3D; new Test();</span><br><span class="line">$show1 &#x3D; $test-&gt;test1($word);</span><br><span class="line">$show2 &#x3D; $test-&gt;test2($word);</span><br><span class="line">echo $show1;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo $show2 ;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br></pre></td></tr></table></figure><p>結果顯示如下：</p><small style="color: lightslategray">Result:</small><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test1 method result is Word</span><br><span class="line">test2 method not exist</span><br></pre></td></tr></table></figure><p>宣告一個類別為 Test 的物件，呼叫方法 <code>test1()</code> 和 <code>test2()</code>。<br>Test 類別中有定義 <code>test1()</code> 這個方法，而未定義 <code>test2()</code>，所以當呼叫 <code>test2()</code> 時，就會觸發 <code>__call()</code>。</p><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic"></a>__callStatic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public __callStatic(string $name, array $arguments): mixed</span><br></pre></td></tr></table></figure><p><code>$name</code> → 要呼叫的方法名稱</p><small style="color: lightslategray">The $name argument is the name of the method being called.<br></small><p><code>$arguments</code> → 傳給 <code>$name</code> 方法的枚舉陣列</p><small style="color: lightslategray">The $arguments argument is an enumerated array containing the parameters passed to the $name's method.</small><h4 id="若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發-callStatic-。"><a href="#若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發-callStatic-。" class="headerlink" title="若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發 __callStatic()。"></a>若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發 <code>__callStatic()</code>。</h4><small style="color: lightslategray">__callStatic() is triggered when invoking inaccessible methods in a static context.</small><p>PHP 5.3.0 之後版本才有此方法。</p><small style="color: lightslategray">Version 5.3.0 → Added __callStatic().</small><p>接著來看看下方的範例加強理解：</p><small style="color: lightslategray">Example:</small><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public static function __callStatic($methodName, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        return $methodName . &#39; method not exist&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function test1($word)</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;test1 method result is &#39; . $word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$word &#x3D; &#39;Word&#39;;</span><br><span class="line">$show1 &#x3D; Test::test1($word);</span><br><span class="line">$show2 &#x3D; Test::test2($word);</span><br><span class="line">echo $show1;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo $show2 ;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br></pre></td></tr></table></figure><p>結果顯示如下：</p><small style="color: lightslategray">Result:</small><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test1 method result is Word</span><br><span class="line">test2 method not exist</span><br></pre></td></tr></table></figure><p>呼叫 Test 類別中的 <code>test1()</code> 和 <code>test2()</code> 靜態方法。<br>Test 類別中有定義 <code>test1()</code> 這個靜態方法，而未定義 <code>test2()</code>，所以當呼叫 <code>test2()</code> 時，就會觸發 <code>__callStatic()</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喵</title>
      <link href="/2019/12/30/%E5%96%B5/"/>
      <url>/2019/12/30/%E5%96%B5/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是若憐。<br>夢想是製作出屬於自己的虛擬實境遊戲世界！</p><p>反省並期望為了未來回顧時能夠不後悔！<br>我決心要好好逼迫一下自己並給予壓力，<br>於是開始撰寫文章記錄成長的點點滴滴～</p><p>目前的職業是後端開發工程師，<br>會一點兒菜鳥級別的前端技術。<br>但一直以來都很不喜歡作筆記，<br>常常浪費時間在相同的問題上，<br>接下來會把心得與做法都寫下，<br>壓榨出能用之時間以持續進修，<br>我想這樣距離夢想也就更近了…</p><p>文章大部分皆以程式為主，<br>會努力增加遊戲相關文章！</p><p>講到了遊戲世界，<br>要建立劇情觀點，<br>自然需要故事囉～<br>所以也會分享些<br>我天馬行空想出來的故事，<br>歡迎各位提供意見與交流！</p>]]></content>
      
      
      <categories>
          
          <category> 談心 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
