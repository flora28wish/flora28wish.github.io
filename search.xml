<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP 方法多載 2</title>
      <link href="/2020/04/21/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%202/"/>
      <url>/2020/04/21/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%202/</url>
      
        <content type="html"><![CDATA[<p>接著本篇將會介紹上一篇沒仔細講解到的枚舉陣列。</p><p>Example1: (<a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example1-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span><span class="params">($input1, $input2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method1: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$show1 = $test-&gt;method1(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show1;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method1: Word1 &amp; Word2</span><br></pre></td></tr></table></figure><p>Example1 中 Test 類別 method1() 方法定義了兩個傳入參數，分別為 $input1 和 $input2。這表示呼叫方法 method1() 的時候，傳入參數的數量必須是兩個。</p><p>看到這裡有些人可能會感到疑惑。不對呀～印象中有見過一些方法雖然定義了固定數量的傳入參數，但是呼叫方法時傳入的參數數量與定義的數量不同。</p><p>這是因為傳入參數有設定預設值的關係喔！</p><p>Example2: (<a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example2-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span><span class="params">($input1, $input2 = <span class="string">'Default2'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method2: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$show21 = $test-&gt;method2(<span class="string">'Word1'</span>);</span><br><span class="line">$show22 = $test-&gt;method2(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show21 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show22;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method2: Word1 &amp; Default2</span><br><span class="line">method2: Word1 &amp; Word2</span><br></pre></td></tr></table></figure><p>Example2 中 Test 類別 method2() 方法中 $input2 傳入參數設定了預設值 Default2。<br>此時呼叫方法 method2() 就算不傳入第二個參數也可以，但不代表傳入參數只有一個，而是程式已經取得第二個傳入參數的值，也就是一開始就設好的預設值，所以傳入參數的數量不變一樣是兩個。</p><p>Example3: (<a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example3-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method3</span><span class="params">($input1 = <span class="string">'Default1'</span>, $input2 = <span class="string">'Default2'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method3: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$show31 = $test-&gt;method3();</span><br><span class="line">$show32 = $test-&gt;method3(<span class="string">'Word1'</span>);</span><br><span class="line">$show33 = $test-&gt;method3(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show31 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show32 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show33;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method3: Default1 &amp; Default2</span><br><span class="line">method3: Word1 &amp; Default2</span><br><span class="line">method3: Word1 &amp; Word2</span><br></pre></td></tr></table></figure><p>以此類推，Example3 中 Test 類別 method3() 方法的兩個傳入參數都設定好預設值，則可以不傳任何值，就能取到傳入參數的值，分別為 Default1 和 Default2。</p><p>講到這裡會不會有人想說，那 $input1 設定預設值而 $input2 不設定預設值，是不是也可以只傳一個參數值呢？答案是不行！這是因為程式是按照順序做判斷。</p><p>以下方的 Example4 為例，一開始程式會去比對第一個傳入參數 $input1 與呼叫方法 method4() 時放在第一個位置的值 Word2，有值的話就不會去管有無預設值，而是直接判定該值是第一個傳入參數的值。在比對完第一個傳入參數之後，才會接著比對第二個傳入參數 $input2 與呼叫方法 method4() 時放在第二個位置的值，如果第二個位置沒有值就會去判斷是否有設定預設值，若是都沒有程式就會出錯啦～</p><p>呼叫方法時可以省略幾個傳入值，只能從後面有設定預設值的傳入參數開始計算數量。</p><p>Example4: (<a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example4-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method4</span><span class="params">($input1, $input2 = <span class="string">'Default2'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method4: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$show4 = $test-&gt;method4(<span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show4;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method4: Word2 &amp; Default2</span><br></pre></td></tr></table></figure><p>前面講這麽多到底跟枚舉陣列有什麼關係呢？前面講到的是定義好傳入參數的數量就必須擁有那個數量的傳入參數，而枚舉陣列則是不限制傳入參數的數量。</p><p>不用懷疑，你可沒看錯喔～枚舉陣列可以允許傳入 0 ~ N 個動態數量的參數，並集成一個陣列形式的變數值。</p><p>若還是不明白就從 Example5 中來看吧～呼叫方法 method5()、method6()、method7()、method8()，分別傳入 0、1、2、3 個不同數量的值。因為 Test 類別沒有定義這些方法，所以觸發了 __call()，透過 var_dump() 函式的呈現，可以清楚知道 $arguments 的資料型態為陣列且包含了所有傳入的值。</p><p><img src="images/20200421_M1_Example6_1.png" alt="20200421_M1_Example6_1.png"></p><p>最後要提醒一點，就是不是所有的方法都可以使用枚舉陣列，而是只有一些特殊方法才會擁有的特例喔！</p><p>Example5: (<a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example5-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($methodName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump($arguments);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $methodName . <span class="string">' method not exist. arguments: '</span> . implode(<span class="string">' &amp; '</span>, $arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">$show5 = $test-&gt;method5();</span><br><span class="line"><span class="keyword">echo</span> $show5 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show6 = $test-&gt;method6(<span class="string">'Word1'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show6 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show7 = $test-&gt;method7(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show7 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show8 = $test-&gt;method8(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>, <span class="string">'Word3'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show8;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">array(0) &#123; &#125;</span><br><span class="line">method5 method not exist. arguments:</span><br><span class="line"></span><br><span class="line">array(1) &#123; [0]=&gt; string(5) "Word1" &#125;</span><br><span class="line">method6 method not exist. arguments: Word1</span><br><span class="line"></span><br><span class="line">array(2) &#123; [0]=&gt; string(5) "Word1" [1]=&gt; string(5) "Word2" &#125;</span><br><span class="line">method7 method not exist. arguments: Word1 &amp; Word2</span><br><span class="line"></span><br><span class="line">array(3) &#123; [0]=&gt; string(5) "Word1" [1]=&gt; string(5) "Word2" [2]=&gt; string(5) "Word3" &#125;</span><br><span class="line">method8 method not exist. arguments: Word1 &amp; Word2 &amp; Word3</span><br></pre></td></tr></table></figure><p>Example6:<br>整合 Example1 ~ Example5 與 __call() 有關的程式碼可以到 <a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example6-php" target="_blank" rel="noopener">Gist</a> 查看。</p><p>__callStatic() 與 __call() 的 $arguments 也是一樣的用法。</p><p>Example7: (<a href="https://gist.github.com/flora28wish/0365c969006290b58b92a113b9015ed9#file-20200421_m1_example7-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($methodName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump($arguments);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $methodName . <span class="string">' method not exist. arguments: '</span> . implode(<span class="string">' &amp; '</span>, $arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span><span class="params">($input1, $input2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method1: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span><span class="params">($input1, $input2 = <span class="string">'Default2'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method2: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method3</span><span class="params">($input1 = <span class="string">'Default1'</span>, $input2 = <span class="string">'Default2'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method3: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method4</span><span class="params">($input1, $input2 = <span class="string">'Default2'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method4: '</span> . $input1 . <span class="string">' &amp; '</span> . $input2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$show1 = Test::method1(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show1 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show21 = Test::method2(<span class="string">'Word1'</span>);</span><br><span class="line">$show22 = Test::method2(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show21 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show22 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show31 = Test::method3();</span><br><span class="line">$show32 = Test::method3(<span class="string">'Word1'</span>);</span><br><span class="line">$show33 = Test::method3(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show31 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show32 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show33 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show4 = Test::method4(<span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show4 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show5 = Test::method5();</span><br><span class="line"><span class="keyword">echo</span> $show5 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show6 = Test::method6(<span class="string">'Word1'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show6 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show7 = Test::method7(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show7 . <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$show8 = Test::method8(<span class="string">'Word1'</span>, <span class="string">'Word2'</span>, <span class="string">'Word3'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show8;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">method1: Word1 &amp; Word2</span><br><span class="line"></span><br><span class="line">method2: Word1 &amp; Default2</span><br><span class="line">method2: Word1 &amp; Word2</span><br><span class="line"></span><br><span class="line">method3: Default1 &amp; Default2</span><br><span class="line">method3: Word1 &amp; Default2</span><br><span class="line">method3: Word1 &amp; Word2</span><br><span class="line"></span><br><span class="line">method4: Word2 &amp; Default2</span><br><span class="line"></span><br><span class="line">array(0) &#123; &#125;</span><br><span class="line">method5 method not exist. arguments:</span><br><span class="line"></span><br><span class="line">array(1) &#123; [0]=&gt; string(5) "Word1" &#125;</span><br><span class="line">method6 method not exist. arguments: Word1</span><br><span class="line"></span><br><span class="line">array(2) &#123; [0]=&gt; string(5) "Word1" [1]=&gt; string(5) "Word2" &#125;</span><br><span class="line">method7 method not exist. arguments: Word1 &amp; Word2</span><br><span class="line"></span><br><span class="line">array(3) &#123; [0]=&gt; string(5) "Word1" [1]=&gt; string(5) "Word2" [2]=&gt; string(5) "Word3" &#125;</span><br><span class="line">method8 method not exist. arguments: Word1 &amp; Word2 &amp; Word3</span><br></pre></td></tr></table></figure><p><img src="images/20200421_M1_Example7_1.png" alt="20200421_M1_Example7_1.png"></p><br><hr><br><blockquote><p><a href="2020/04/18/PHP%20方法多載%201/">上一篇 PHP 方法多載 1</a></p></blockquote><p>我是寫文新手，才剛剛開始嘗試撰寫程式心得與解說，期望透過這個方式增加自己熟練度的同時也能幫助到他人。文章可能會有很多需要改進的地方，歡迎各位提供建議，抑或是提出問題一起討論交流，讓我們一同成長吧！</p><p>如果你覺得這篇文章對你有所幫助的話，請幫我按下方的「拍手(Like)」，讓我可以獲得些許 LikeCoin 的收入，支持我創作更多教學內容，謝謝！</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> 程式語言 </tag>
            
            <tag> PHP </tag>
            
            <tag> 網站製作 </tag>
            
            <tag> 網頁設計 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 方法多載 1</title>
      <link href="/2020/04/18/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%201/"/>
      <url>/2020/04/18/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%201/</url>
      
        <content type="html"><![CDATA[<p>我是 PHP 工程師，目前的工作主要都是使用 Laravel 框架進行開發，其中經常使用到 <a href="https://github.com/andersao/l5-repository" target="_blank" rel="noopener">andersao/l5-repository</a> 套件，一直以來都是乖乖的按照文件上面提供的方法使用，忽然心血來潮的看了看源代碼。誒！想說怎麼錯過了這麼好用的方法呢～趕快來筆記一下💕</p><h1 id="多載-Overloading"><a href="#多載-Overloading" class="headerlink" title="多載 Overloading"></a>多載 Overloading</h1><p>PHP 多載意指動態創建屬性或方法。透過魔術方法來實現。 <a href="https://www.php.net/manual/en/language.oop5.overloading.php" target="_blank" rel="noopener">參考</a></p><blockquote><p>Overloading in PHP provides means to dynamically “create” properties and methods.<br>These dynamic entities are processed via magic methods.</p></blockquote><p>與 Java 多載的概念不同，這點需要特別注意！</p><blockquote><p>PHP’s overloading features are different from Java’s.</p></blockquote><h2 id="方法多載-Method-Overloading"><a href="#方法多載-Method-Overloading" class="headerlink" title="方法多載 Method Overloading"></a>方法多載 Method Overloading</h2><p>方法多載有 __call() 和 __callStatic() 這兩種魔法方法。 <a href="https://www.php.net/manual/en/language.oop5.overloading.php#object.call" target="_blank" rel="noopener">參考</a></p><blockquote><p>Overloading methods via the __call() and __callStatic() magic methods.</p></blockquote><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> __call(string $name, <span class="keyword">array</span> $arguments): mixed</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/flora28wish/34cc3d465b1125353303b6631b0853df#file-20200418_code1-php" target="_blank" rel="noopener">↑ Gist</a></p><p>$name → 要呼叫的方法名稱</p><blockquote><p>The $name argument is the name of the method being called.<br></p></blockquote><p>$arguments → 傳給 $name 方法的枚舉陣列</p><blockquote><p>The $arguments argument is an enumerated array containing the parameters passed to the $name’s method.</p></blockquote><h4 id="若呼叫物件某個方法，但這個方法未被定義時，就會觸發-call-。"><a href="#若呼叫物件某個方法，但這個方法未被定義時，就會觸發-call-。" class="headerlink" title="若呼叫物件某個方法，但這個方法未被定義時，就會觸發 __call()。"></a>若呼叫物件某個方法，但這個方法未被定義時，就會觸發 __call()。</h4><blockquote><p>__call is triggered when invoking inaccessible methods in an object context.</p></blockquote><p>接著來看看下方的範例加強理解：<br>Example: (<a href="https://gist.github.com/flora28wish/34cc3d465b1125353303b6631b0853df#file-20200418_example1-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($methodName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $methodName . <span class="string">' method not exist'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method1 method result is '</span> . $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$show1 = $test-&gt;method1(<span class="string">'Word'</span>);</span><br><span class="line">$show2 = $test-&gt;method2(<span class="string">'Word'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show1 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show2;</span><br></pre></td></tr></table></figure><p>結果顯示如下：<br>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method1 method result is Word</span><br><span class="line">method2 method not exist</span><br></pre></td></tr></table></figure><p>宣告一個類別為 Test 的物件，呼叫方法 method1() 和 method2()。Test 類別中有定義 method1() 這個方法，而未定義 method2()，所以當呼叫 method2() 時，就會觸發 __call()。</p><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> __callStatic(string $name, <span class="keyword">array</span> $arguments): mixed</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/flora28wish/34cc3d465b1125353303b6631b0853df#file-20200418_code2-php" target="_blank" rel="noopener">↑ Gist</a></p><p>$name → 要呼叫的方法名稱</p><blockquote><p>The $name argument is the name of the method being called.<br></p></blockquote><p>$arguments → 傳給 $name 方法的枚舉陣列</p><blockquote><p>The $arguments argument is an enumerated array containing the parameters passed to the $name’s method.</p></blockquote><h4 id="若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發-callStatic-。"><a href="#若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發-callStatic-。" class="headerlink" title="若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發 __callStatic()。"></a>若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發 __callStatic()。</h4><blockquote><p>__callStatic() is triggered when invoking inaccessible methods in a static context.</p></blockquote><p>PHP 5.3.0 之後版本才有此方法。</p><blockquote><p>Version 5.3.0 → Added __callStatic().</p></blockquote><p>接著來看看下方的範例加強理解：<br>Example: (<a href="https://gist.github.com/flora28wish/34cc3d465b1125353303b6631b0853df#file-20200418_example2-php" target="_blank" rel="noopener">Gist</a>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($methodName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $methodName . <span class="string">' method not exist'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'method1 method result is '</span> . $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$show1 = Test::method1(<span class="string">'Word'</span>);</span><br><span class="line">$show2 = Test::method2(<span class="string">'Word'</span>);</span><br><span class="line"><span class="keyword">echo</span> $show1 . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $show2;</span><br></pre></td></tr></table></figure><p>結果顯示如下：<br>Result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method1 method result is Word</span><br><span class="line">method2 method not exist</span><br></pre></td></tr></table></figure><p>呼叫 Test 類別中的 method1() 和 method2() 靜態方法。Test 類別中有定義 method1() 這個靜態方法，而未定義 method2()，所以當呼叫 method2() 時，就會觸發 __callStatic()。</p><br><hr><br><blockquote><p><a href="/2020/04/21/PHP%20方法多載%202/">下一篇 PHP 方法多載 2</a></p></blockquote><p>我是寫文新手，才剛剛開始嘗試撰寫程式心得與解說，期望透過這個方式增加自己熟練度的同時也能幫助到他人。文章可能會有很多需要改進的地方，歡迎各位提供建議，抑或是提出問題一起討論交流，讓我們一同成長吧！</p><p>如果你覺得這篇文章對你有所幫助的話，請幫我按下方的「拍手(Like)」，讓我可以獲得些許 LikeCoin 的收入，支持我創作更多教學內容，謝謝！</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> 程式語言 </tag>
            
            <tag> PHP </tag>
            
            <tag> 網站製作 </tag>
            
            <tag> 網頁設計 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喵</title>
      <link href="/2019/12/30/%E5%96%B5/"/>
      <url>/2019/12/30/%E5%96%B5/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是若憐。<br>夢想是製作出屬於自己的虛擬實境遊戲世界！</p><p>反省並期望為了未來回顧時能夠不後悔！<br>我決心要好好逼迫一下自己並給予壓力，<br>於是開始撰寫文章記錄成長的點點滴滴～</p><p>目前的職業是後端開發工程師，<br>會一點兒菜鳥級別的前端技術。<br>但一直以來都很不喜歡作筆記，<br>常常浪費時間在相同的問題上，<br>接下來會把心得與做法都寫下，<br>壓榨出能用之時間以持續進修，<br>我想這樣距離夢想也就更近了…</p><p>文章大部分皆以程式為主，<br>會努力增加遊戲相關文章！</p><p>講到了遊戲世界，<br>要建立劇情觀點，<br>自然需要故事囉～<br>所以也會分享些<br>我天馬行空想出來的故事，<br>歡迎各位提供意見與交流！</p>]]></content>
      
      
      <categories>
          
          <category> 談心 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
