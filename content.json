{"meta":{"title":"築夢踏實","subtitle":"","description":"","author":"若憐","url":"http://flora28wish.github.io","root":"/"},"pages":[{"title":"關於本站","date":"2019-12-30T16:02:00.000Z","updated":"2019-12-30T16:02:00.000Z","comments":true,"path":"about/index.html","permalink":"http://flora28wish.github.io/about/index.html","excerpt":"","text":"若憐 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 看似精明實則迷糊的小小工程師編織夢想的點點滴滴"},{"title":"所有分類","date":"2019-12-24T14:39:24.000Z","updated":"2019-12-24T14:39:24.000Z","comments":true,"path":"categories/index.html","permalink":"http://flora28wish.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有標籤","date":"2019-12-24T14:39:23.000Z","updated":"2019-12-24T14:39:23.000Z","comments":true,"path":"tags/index.html","permalink":"http://flora28wish.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PHP 方法多載 2 (改版)","slug":"PHP 方法多載 2 改版","date":"2020-04-30T00:00:00.000Z","updated":"2020-04-30T15:45:50.000Z","comments":true,"path":"2020/04/30/PHP 方法多載 2 改版/","link":"","permalink":"http://flora28wish.github.io/2020/04/30/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%202%20%E6%94%B9%E7%89%88/","excerpt":"","text":"接著本篇將會介紹上一篇沒仔細講解到的枚舉陣列。 Example1: (Gist) 1234567891011class Test&#123; public function method1($input1, $input2) &#123; return 'method1: ' . $input1 . ' &amp; ' . $input2; &#125;&#125;$test = new Test();$show1 = $test-&gt;method1('Word1', 'Word2');echo $show1; Result: 1method1: Word1 &amp; Word2 Example1 中 Test 類別 method1 方法定義了兩個傳入參數，分別為 $input1 和 $input2。這表示呼叫 method1 方法的時候，傳入參數的數量必須是兩個。 看到這裡有些人可能會感到疑惑。不對呀～印象中有見過一些方法雖然定義了固定數量的傳入參數，但是呼叫方法時傳入的參數數量與定義的數量不同。 這是因為傳入參數有設定預設值的關係喔！ Example2: (Gist) 12345678910111213class Test&#123; public function method2($input1, $input2 = 'Default2') &#123; return 'method2: ' . $input1 . ' &amp; ' . $input2; &#125;&#125;$test = new Test();$show21 = $test-&gt;method2('Word1');$show22 = $test-&gt;method2('Word1', 'Word2');echo $show21 . '&lt;br&gt;';echo $show22; Result: 12method2: Word1 &amp; Default2method2: Word1 &amp; Word2 Example2 中 Test 類別 method2 方法中 $input2 傳入參數設定了預設值 Default2。 此時呼叫 method2 方法就算不傳入第二個參數也可以，但不代表傳入參數只有一個，而是程式已經取得第二個傳入參數的值，也就是一開始就設好的預設值，所以傳入參數的數量不變一樣是兩個。 Example3: (Gist) 123456789101112131415class Test&#123; public function method3($input1 = 'Default1', $input2 = 'Default2') &#123; return 'method3: ' . $input1 . ' &amp; ' . $input2; &#125;&#125;$test = new Test();$show31 = $test-&gt;method3();$show32 = $test-&gt;method3('Word1');$show33 = $test-&gt;method3('Word1', 'Word2');echo $show31 . '&lt;br&gt;';echo $show32 . '&lt;br&gt;';echo $show33; Result: 123method3: Default1 &amp; Default2method3: Word1 &amp; Default2method3: Word1 &amp; Word2 以此類推，Example3 中 Test 類別 method3 方法的兩個傳入參數都設定好預設值，則可以不傳任何值，就能取到傳入參數的值，分別為 Default1 和 Default2。 講到這裡會不會有人想說，那 $input1 設定預設值而 $input2 不設定預設值，是不是也可以只傳一個參數值呢？答案是不行！這是因為程式是按照順序做判斷。 以下方的 Example4 為例，一開始程式會去比對第一個傳入參數 $input1 與呼叫 method4 方法時放在第一個位置的值 Word2，有值的話就不會去管有無預設值，而是直接判定該值是第一個傳入參數的值。在比對完第一個傳入參數之後，才會接著比對第二個傳入參數 $input2 與呼叫 method4 方法時放在第二個位置的值，如果第二個位置沒有值就會去判斷是否有設定預設值，若是都沒有程式就會出錯啦～ 呼叫方法時可以省略幾個傳入值，只能從後面有設定預設值的傳入參數開始計算數量。 Example4: (Gist) 1234567891011class Test&#123; public function method4($input1, $input2 = 'Default2') &#123; return 'method4: ' . $input1 . ' &amp; ' . $input2; &#125;&#125;$test = new Test();$show4 = $test-&gt;method4('Word2');echo $show4; Result: 1method4: Word2 &amp; Default2 前面講這麽多到底跟枚舉陣列有什麼關係呢？前面講到的是定義好傳入參數的數量就必須擁有那個數量的傳入參數，而枚舉陣列則是不限制傳入參數的數量。 不用懷疑，你可沒看錯喔～枚舉陣列可以允許傳入 0 ~ N 個動態數量的參數，並集成一個陣列形式的變數值。 若還是不明白就從 Example5 中來看吧～呼叫 method5、method6、method7、method8 方法，分別傳入 0、1、2、3 個不同數量的值。因為 Test 類別沒有定義這些方法，所以觸發了 __call 方法，透過 var_dump 函式的呈現，可以清楚知道 $arguments 的資料型態為陣列且包含了所有傳入的值。 最後要提醒一點，就是不是所有的方法都可以使用枚舉陣列，而是只有一些特殊方法才會擁有的特例喔！ Example5: (Gist) 1234567891011121314151617181920212223class Test&#123; public function __call($methodName, $arguments) &#123; var_dump($arguments); echo '&lt;br&gt;'; return $methodName . ' method not exist. arguments: ' . implode(' &amp; ', $arguments); &#125;&#125;$test = new Test();$show5 = $test-&gt;method5();echo $show5 . '&lt;br&gt;&lt;br&gt;';$show6 = $test-&gt;method6('Word1');echo $show6 . '&lt;br&gt;&lt;br&gt;';$show7 = $test-&gt;method7('Word1', 'Word2');echo $show7 . '&lt;br&gt;&lt;br&gt;';$show8 = $test-&gt;method8('Word1', 'Word2', 'Word3');echo $show8; Result: 1234567891011array(0) &#123; &#125;method5 method not exist. arguments:array(1) &#123; [0]=&gt; string(5) \"Word1\" &#125;method6 method not exist. arguments: Word1array(2) &#123; [0]=&gt; string(5) \"Word1\" [1]=&gt; string(5) \"Word2\" &#125;method7 method not exist. arguments: Word1 &amp; Word2array(3) &#123; [0]=&gt; string(5) \"Word1\" [1]=&gt; string(5) \"Word2\" [2]=&gt; string(5) \"Word3\" &#125;method8 method not exist. arguments: Word1 &amp; Word2 &amp; Word3 Example6: 整合 Example1 ~ Example5 與 __call 有關的程式碼可以到 Gist 查看。 __callStatic 與 __call 的 $arguments 也是一樣的用法。 Example7: (Gist) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Test&#123; public static function __callStatic($methodName, $arguments) &#123; var_dump($arguments); echo '&lt;br&gt;'; return $methodName . ' method not exist. arguments: ' . implode(' &amp; ', $arguments); &#125; public static function method1($input1, $input2) &#123; return 'method1: ' . $input1 . ' &amp; ' . $input2; &#125; public static function method2($input1, $input2 = 'Default2') &#123; return 'method2: ' . $input1 . ' &amp; ' . $input2; &#125; public static function method3($input1 = 'Default1', $input2 = 'Default2') &#123; return 'method3: ' . $input1 . ' &amp; ' . $input2; &#125; public static function method4($input1, $input2 = 'Default2') &#123; return 'method4: ' . $input1 . ' &amp; ' . $input2; &#125;&#125;$show1 = Test::method1('Word1', 'Word2');echo $show1 . '&lt;br&gt;&lt;br&gt;';$show21 = Test::method2('Word1');$show22 = Test::method2('Word1', 'Word2');echo $show21 . '&lt;br&gt;';echo $show22 . '&lt;br&gt;&lt;br&gt;';$show31 = Test::method3();$show32 = Test::method3('Word1');$show33 = Test::method3('Word1', 'Word2');echo $show31 . '&lt;br&gt;';echo $show32 . '&lt;br&gt;';echo $show33 . '&lt;br&gt;&lt;br&gt;';$show4 = Test::method4('Word2');echo $show4 . '&lt;br&gt;&lt;br&gt;';$show5 = Test::method5();echo $show5 . '&lt;br&gt;&lt;br&gt;';$show6 = Test::method6('Word1');echo $show6 . '&lt;br&gt;&lt;br&gt;';$show7 = Test::method7('Word1', 'Word2');echo $show7 . '&lt;br&gt;&lt;br&gt;';$show8 = Test::method8('Word1', 'Word2', 'Word3');echo $show8; Result: 12345678910111213141516171819202122method1: Word1 &amp; Word2method2: Word1 &amp; Default2method2: Word1 &amp; Word2method3: Default1 &amp; Default2method3: Word1 &amp; Default2method3: Word1 &amp; Word2method4: Word2 &amp; Default2array(0) &#123; &#125;method5 method not exist. arguments:array(1) &#123; [0]=&gt; string(5) \"Word1\" &#125;method6 method not exist. arguments: Word1array(2) &#123; [0]=&gt; string(5) \"Word1\" [1]=&gt; string(5) \"Word2\" &#125;method7 method not exist. arguments: Word1 &amp; Word2array(3) &#123; [0]=&gt; string(5) \"Word1\" [1]=&gt; string(5) \"Word2\" [2]=&gt; string(5) \"Word3\" &#125;method8 method not exist. arguments: Word1 &amp; Word2 &amp; Word3 我乃寫文新手，才剛剛開始嘗試撰寫程式心得與解說，期望透過這個方式增加自己熟練度的同時也能幫助到他人。文章可能會有很多需要改進的地方，歡迎各位提供建議，抑或是提出問題一起討論交流，讓我們一同成長吧！ 版本記錄：2020/04/21 初版2020/04/30 改版 NOW 上一篇 PHP 方法多載 1 如果你覺得這篇文章對你有所幫助的話，請幫我按下方的「拍手(Like)」，讓我可以獲得些許 LikeCoin 的收入，支持我創作更多教學內容，謝謝！","categories":[{"name":"筆記","slug":"筆記","permalink":"http://flora28wish.github.io/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://flora28wish.github.io/tags/PHP/"}]},{"title":"PHP 方法多載 2","slug":"PHP 方法多載 2","date":"2020-04-21T00:00:00.000Z","updated":"2020-04-30T15:59:16.000Z","comments":true,"path":"2020/04/21/PHP 方法多載 2/","link":"","permalink":"http://flora28wish.github.io/2020/04/21/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%202/","excerpt":"","text":"接著介紹上一篇沒說明到的枚舉陣列，以 __call 為例： Example: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;?phpclass Test&#123; public function __call($methodName, $arguments) &#123; var_dump($arguments); echo &#39;&lt;br&gt;&#39;; return $methodName . &#39; method not exist. arguments: &#39; . implode(&#39; &amp; &#39;, $arguments); &#125; public function test1($word1, $word2) &#123; return &#39;test1 method result: &#39; . $word1 . &#39; &amp; &#39; . $word2; &#125; public function test2($word1, $word2 &#x3D; &#39;default2&#39;) &#123; return &#39;test2 method result: &#39; . $word1 . &#39; &amp; &#39; . $word2; &#125; public function test3($word1 &#x3D; &#39;default1&#39;, $word2 &#x3D; &#39;default2&#39;) &#123; return &#39;test3 method result: &#39; . $word1 . &#39; &amp; &#39; . $word2; &#125;&#125;$test &#x3D; new Test();$show1 &#x3D; $test-&gt;test1(&#39;Word1&#39;, &#39;Word2&#39;);echo $show1;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show21 &#x3D; $test-&gt;test2(&#39;Word1&#39;);$show22 &#x3D; $test-&gt;test2(&#39;Word1&#39;, &#39;Word2&#39;);echo $show21;echo &#39;&lt;br&gt;&#39;;echo $show22;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show31 &#x3D; $test-&gt;test3();$show32 &#x3D; $test-&gt;test3(&#39;Word1&#39;);$show33 &#x3D; $test-&gt;test3(&#39;Word1&#39;, &#39;Word2&#39;);echo $show31;echo &#39;&lt;br&gt;&#39;;echo $show32;echo &#39;&lt;br&gt;&#39;;echo $show33;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show4 &#x3D; $test-&gt;test4();echo $show4;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show5 &#x3D; $test-&gt;test5(&#39;Word1&#39;);echo $show5;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show6 &#x3D; $test-&gt;test6(&#39;Word1&#39;, &#39;Word2&#39;);echo $show6;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show7 &#x3D; $test-&gt;test7(&#39;Word1&#39;, &#39;Word2&#39;, &#39;Word3&#39;);echo $show7;echo &#39;&lt;br&gt;&#39;; 結果顯示如下：Result: 1234567891011121314151617181920test1 method result: Word1 &amp; Word2test2 method result: Word1 &amp; default2test2 method result: Word1 &amp; Word2test3 method result: default1 &amp; default2test3 method result: Word1 &amp; default2test3 method result: Word1 &amp; Word2array(0) &#123; &#125;test4 method not exist. arguments:array(1) &#123; [0]&#x3D;&gt; string(5) &quot;Word1&quot; &#125;test5 method not exist. arguments: Word1array(2) &#123; [0]&#x3D;&gt; string(5) &quot;Word1&quot; [1]&#x3D;&gt; string(5) &quot;Word2&quot; &#125;test6 method not exist. arguments: Word1 &amp; Word2array(3) &#123; [0]&#x3D;&gt; string(5) &quot;Word1&quot; [1]&#x3D;&gt; string(5) &quot;Word2&quot; [2]&#x3D;&gt; string(5) &quot;Word3&quot; &#125;test7 method not exist. arguments: Word1 &amp; Word2 &amp; Word3 &ensp;&ensp;&ensp;&ensp;Test 類別 test1 方法定義兩個傳入參數，分別為 $word1 和 $word2，因此傳入參數的數量就必須是兩個。 &ensp;&ensp;&ensp;&ensp;不過看到這裡有些人可能會覺得疑惑，明明有看到像這樣的方法但不是傳兩個的參數的呀～那是因為預設值的關係喔！往下看 Test 類別 test2 方法的 $word2 設定了預設值 default2，此時就算不傳入第二個參數也可以，但不代表傳入參數只有一個，而是程式早已經取得第二個傳入參數的值，也就是一開始就設好的預設值，所以傳入參數的數量不變一樣是兩個。以此類推，Test 類別 test3 方法的兩個傳入參數都設定好預設值，則可以不傳任何值，就能取到傳入參數值 default1 和 default2。 &ensp;&ensp;&ensp;&ensp;講到這裡會不會有人想說，那 $word1 設定預設值而 $word2 不設定預設值，是不是也可以只傳一個參數值呢？答案是不行，這是因為程式是按照順序做判斷，程式一開始會去比對第一個傳入參數 $word1 與放在第一個位置的值，有值的話就不會管有無預設值，當第一個位置的參數比對完之後，才會接著比對第二個傳入參數 $word2 與第二個位置的值，若第二個位置沒有值就會去判斷是否有設定預設值，若是都沒有程式就會出錯啦～所以要留意可以省略幾個傳入值，只能從後面有設定預設值的傳入參數開始算。 &ensp;&ensp;&ensp;&ensp;前面講這麽多到底跟枚舉陣列有什麼關係呢？前面講到的是定義好傳入參數的數量就必須擁有那個數量的傳入參數，而枚舉陣列則是不限制傳入參數的數量。不用懷疑，你可沒看錯喔～枚舉陣列可以允許傳入 0 ～ N 個動態數量的參數，並集成一個陣列形式的變數值。若還是不明白就從範例中來看，呼叫 test4、test5、test6、test7 方法，分別傳入 0、1、2、3 個不同數量的參數值，因為 Test 類別沒有定義這些方法，所以觸發了 __call 方法，透過 var_dump 函式的呈現，可以清楚知道 $arguments 的資料型態為陣列且包含了所有傳入的參數值。最後要提醒一點，就是不是所有的方法都可以使用枚舉陣列，而是只有一些特殊方法才會擁有的特例喔！ __callStatic 與 __call 的 $arguments 也是一樣的用法。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?phpclass Test&#123; public static function __callStatic($methodName, $arguments) &#123; var_dump($arguments); echo &#39;&lt;br&gt;&#39;; return $methodName . &#39; method not exist. arguments: &#39; . implode(&#39; &amp; &#39;, $arguments); &#125; public static function test1($word1, $word2) &#123; return &#39;test1 method result: &#39; . $word1 . &#39; &amp; &#39; . $word2; &#125; public static function test2($word1, $word2 &#x3D; &#39;default2&#39;) &#123; return &#39;test2 method result: &#39; . $word1 . &#39; &amp; &#39; . $word2; &#125; public static function test3($word1 &#x3D; &#39;default1&#39;, $word2 &#x3D; &#39;default2&#39;) &#123; return &#39;test3 method result: &#39; . $word1 . &#39; &amp; &#39; . $word2; &#125;&#125;$show1 &#x3D; Test::test1(&#39;Word1&#39;, &#39;Word2&#39;);echo $show1;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show21 &#x3D; Test::test2(&#39;Word1&#39;);$show22 &#x3D; Test::test2(&#39;Word1&#39;, &#39;Word2&#39;);echo $show21;echo &#39;&lt;br&gt;&#39;;echo $show22;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show31 &#x3D; Test::test3();$show32 &#x3D; Test::test3(&#39;Word1&#39;);$show33 &#x3D; Test::test3(&#39;Word1&#39;, &#39;Word2&#39;);echo $show31;echo &#39;&lt;br&gt;&#39;;echo $show32;echo &#39;&lt;br&gt;&#39;;echo $show33;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show4 &#x3D; Test::test4();echo $show4;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show5 &#x3D; Test::test5(&#39;Word1&#39;);echo $show5;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show6 &#x3D; Test::test6(&#39;Word1&#39;, &#39;Word2&#39;);echo $show6;echo &#39;&lt;br&gt;&#39;;echo &#39;&lt;br&gt;&#39;;$show7 &#x3D; Test::test7(&#39;Word1&#39;, &#39;Word2&#39;, &#39;Word3&#39;);echo $show7;echo &#39;&lt;br&gt;&#39;; 結果顯示如下： Result: 1234567891011121314151617181920test1 method result: Word1 &amp; Word2test2 method result: Word1 &amp; default2test2 method result: Word1 &amp; Word2test3 method result: default1 &amp; default2test3 method result: Word1 &amp; default2test3 method result: Word1 &amp; Word2array(0) &#123; &#125;test4 method not exist. arguments:array(1) &#123; [0]&#x3D;&gt; string(5) &quot;Word1&quot; &#125;test5 method not exist. arguments: Word1array(2) &#123; [0]&#x3D;&gt; string(5) &quot;Word1&quot; [1]&#x3D;&gt; string(5) &quot;Word2&quot; &#125;test6 method not exist. arguments: Word1 &amp; Word2array(3) &#123; [0]&#x3D;&gt; string(5) &quot;Word1&quot; [1]&#x3D;&gt; string(5) &quot;Word2&quot; [2]&#x3D;&gt; string(5) &quot;Word3&quot; &#125;test7 method not exist. arguments: Word1 &amp; Word2 &amp; Word3 我乃寫文新手，才剛剛開始嘗試撰寫程式心得與解說，期望透過這個方式增加自己熟練度的同時也能幫助到他人。文章可能會有很多需要改進的地方，歡迎各位提供建議，抑或是提出問題一起討論交流，讓我們一同成長吧！ 版本記錄：2020/04/21 初版 NOW2020/04/30 改版 上一篇 PHP 方法多載 1 如果你覺得這篇文章對你有所幫助的話，請幫我按下方的「拍手(Like)」，讓我可以獲得些許 LikeCoin 的收入，支持我創作更多教學內容，謝謝！","categories":[{"name":"筆記","slug":"筆記","permalink":"http://flora28wish.github.io/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://flora28wish.github.io/tags/PHP/"}]},{"title":"PHP 方法多載 1","slug":"PHP 方法多載 1","date":"2020-04-18T00:00:00.000Z","updated":"2020-04-30T16:00:38.000Z","comments":true,"path":"2020/04/18/PHP 方法多載 1/","link":"","permalink":"http://flora28wish.github.io/2020/04/18/PHP%20%E6%96%B9%E6%B3%95%E5%A4%9A%E8%BC%89%201/","excerpt":"","text":"我是又小又菜的 PHP 工程師，目前的工作主要都是使用 Laravel 框架進行開發，其中經常使用到 andersao/l5-repository 套件，一直以來都是乖乖的按照文件上面提供的方法使用，忽然心血來潮的看了看源代碼。誒！怎麼錯過了這麼好用的方法呢～趕快來筆記一下💕 多載 OverloadingPHP 多載意指動態創建屬性或方法。透過魔術方法來實現。 參考 Overloading in PHP provides means to dynamically “create” properties and methods.These dynamic entities are processed via magic methods. 與 Java 多載的概念不同，這點需要特別注意！ PHP’s overloading features are different from Java’s. 方法多載 Method Overloading方法多載有 __call() 和 __callStatic() 這兩種魔法方法。 參考 Overloading methods via the __call() and __callStatic() magic methods. __call1public __call(string $name, array $arguments): mixed $name → 要呼叫的方法名稱 The $name argument is the name of the method being called. $arguments → 傳給 $name 方法的枚舉陣列 The $arguments argument is an enumerated array containing the parameters passed to the $name’s method. 若呼叫物件某個方法，但這個方法未被定義時，就會觸發 __call()。 __call is triggered when invoking inaccessible methods in an object context. 接著來看看下方的範例加強理解：Example: 123456789101112131415161718192021class Test&#123; public function __call($methodName, $arguments) &#123; return $methodName . &#39; method not exist&#39;; &#125; public function test1($word) &#123; return &#39;test1 method result is &#39; . $word; &#125;&#125;$word &#x3D; &#39;Word&#39;;$test &#x3D; new Test();$show1 &#x3D; $test-&gt;test1($word);$show2 &#x3D; $test-&gt;test2($word);echo $show1;echo &#39;&lt;br&gt;&#39;;echo $show2 ;echo &#39;&lt;br&gt;&#39;; 結果顯示如下：Result: 12test1 method result is Wordtest2 method not exist 宣告一個類別為 Test 的物件，呼叫方法 test1() 和 test2()。Test 類別中有定義 test1() 這個方法，而未定義 test2()，所以當呼叫 test2() 時，就會觸發 __call()。 __callStatic1public __callStatic(string $name, array $arguments): mixed $name → 要呼叫的方法名稱 The $name argument is the name of the method being called. $arguments → 傳給 $name 方法的枚舉陣列 The $arguments argument is an enumerated array containing the parameters passed to the $name’s method. 若呼叫物件某個靜態方法，但這個靜態方法未被定義時，就會觸發 __callStatic()。 __callStatic() is triggered when invoking inaccessible methods in a static context. PHP 5.3.0 之後版本才有此方法。 Version 5.3.0 → Added __callStatic(). 接著來看看下方的範例加強理解：Example: 1234567891011121314151617181920class Test&#123; public static function __callStatic($methodName, $arguments) &#123; return $methodName . &#39; method not exist&#39;; &#125; public static function test1($word) &#123; return &#39;test1 method result is &#39; . $word; &#125;&#125;$word &#x3D; &#39;Word&#39;;$show1 &#x3D; Test::test1($word);$show2 &#x3D; Test::test2($word);echo $show1;echo &#39;&lt;br&gt;&#39;;echo $show2 ;echo &#39;&lt;br&gt;&#39;; 結果顯示如下：Result: 12test1 method result is Wordtest2 method not exist 呼叫 Test 類別中的 test1() 和 test2() 靜態方法。Test 類別中有定義 test1() 這個靜態方法，而未定義 test2()，所以當呼叫 test2() 時，就會觸發 __callStatic()。 下一篇 PHP 方法多載 2 (改版) 如果你覺得這篇文章對你有所幫助的話，請幫我按下方的「拍手(Like)」，讓我可以獲得些許 LikeCoin 的收入，支持我創作更多教學內容，謝謝！","categories":[{"name":"筆記","slug":"筆記","permalink":"http://flora28wish.github.io/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://flora28wish.github.io/tags/PHP/"}]},{"title":"喵","slug":"喵","date":"2019-12-30T00:00:00.000Z","updated":"2019-12-31T16:07:45.000Z","comments":true,"path":"2019/12/30/喵/","link":"","permalink":"http://flora28wish.github.io/2019/12/30/%E5%96%B5/","excerpt":"","text":"大家好，我是若憐。夢想是製作出屬於自己的虛擬實境遊戲世界！ 反省並期望為了未來回顧時能夠不後悔！我決心要好好逼迫一下自己並給予壓力，於是開始撰寫文章記錄成長的點點滴滴～ 目前的職業是後端開發工程師，會一點兒菜鳥級別的前端技術。但一直以來都很不喜歡作筆記，常常浪費時間在相同的問題上，接下來會把心得與做法都寫下，壓榨出能用之時間以持續進修，我想這樣距離夢想也就更近了… 文章大部分皆以程式為主，會努力增加遊戲相關文章！ 講到了遊戲世界，要建立劇情觀點，自然需要故事囉～所以也會分享些我天馬行空想出來的故事，歡迎各位提供意見與交流！","categories":[{"name":"談心","slug":"談心","permalink":"http://flora28wish.github.io/categories/%E8%AB%87%E5%BF%83/"}],"tags":[]}]}